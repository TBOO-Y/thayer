#ifndef thayer_scanner_h
#define thayer_scanner_h

typedef enum {
    // Single-character tokens.
    TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,
    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,
    TOKEN_COMMA, TOKEN_DOT, TOKEN_SEMICOLON, TOKEN_COLON,
    TOKEN_AMPERSAND, TOKEN_VERTICAL_LINE, TOKEN_CARET, TOKEN_TILDE,
    // One or two character tokens.
    TOKEN_BANG_EQUAL,
    TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,
    TOKEN_GREATER, TOKEN_GREATER_EQUAL,
    TOKEN_LESS, TOKEN_LESS_EQUAL,
    TOKEN_STAR_STAR, TOKEN_PLUS, TOKEN_PLUS_EQUAL,
    TOKEN_MINUS, TOKEN_MINUS_EQUAL,
    TOKEN_STAR, TOKEN_STAR_EQUAL,
    TOKEN_SLASH, TOKEN_SLASH_EQUAL,
    // Literals.
    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_INTEGER, TOKEN_NUMBER,
    // Keywords.
    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_NOT, TOKEN_FALSE,
    TOKEN_THEN, TOKEN_DO, TOKEN_END, TOKEN_DEFAULT, TOKEN_AS, TOKEN_CASE,
    TOKEN_FOR, TOKEN_DEFINE, TOKEN_IF, TOKEN_SWITCH, TOKEN_NIL, TOKEN_OR,
    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,
    TOKEN_TRUE, TOKEN_WHILE,
    TOKEN_START_BLOCK, TOKEN_END_BLOCK,
    TOKEN_BREAK, TOKEN_CONTINUE,
    // Types.
    TOKEN_BOOL, TOKEN_CHAR, TOKEN_DOUBLE, TOKEN_INT, TOKEN_STR, TOKEN_VAR,
    TOKEN_CONST,

    TOKEN_ERROR, TOKEN_EOF
} TokenType;

typedef struct {
    TokenType type;
    const char* start;
    int length;
    int line;
} Token;

void initScanner(const char* source);
Token scanToken();

#endif
